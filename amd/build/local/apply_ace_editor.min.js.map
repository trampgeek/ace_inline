{"version":3,"file":"apply_ace_editor.min.js","sources":["../../src/local/apply_ace_editor.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for applying the ace editor.\n *\n * @module     filter_ace_inline/local/apply_ace_editor\n * @copyright  Richard Lobb, Michelle Hsieh 2022\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {UiParameters} from \"filter_ace_inline/local/ui_parameters\";\nimport {addUi} from \"filter_ace_inline/local/display_ui\";\nimport {setupFileHandler} from \"filter_ace_inline/local/file_helpers\";\n\nconst ACE_DARK_THEME = 'ace/theme/tomorrow_night';\nconst ACE_LIGHT_THEME = 'ace/theme/textmate';\nconst LINE_NUMBER_COL_WIDTH = 42; // Width of line number column in Ace render.\nconst ACE_MODE_MAP = { // Ace modes for various languages (default: use language name).\n    'c': 'c_cpp',\n    'cpp': 'c_cpp',\n    'js': 'javascript',\n    'nodejs': 'javascript',\n    'c#': 'cs',\n    'octave': 'matlab',\n    'c++': 'c_cpp',\n    'python2': 'python',\n    'python3': 'python',\n    'markup': 'html'\n};\n\n/**\n * Replace all <pre> and <code> elements in the document rooted at root that have\n * the given className or ace-inline attribute, with an Ace editor windows that display the\n * code in whatever language has been set.\n * @param {object} root The root of the HTML document to modify.\n * @param {bool} isInteractive True for ace-interactive otherwise false.\n * @param {object} config The plugin configuration settings.\n */\nexport const applyAceAndBuildUi = async(root, isInteractive, config) => {\n    const className = isInteractive ? 'ace-interactive-code' : 'ace-highlight-code';\n    const alternativeName = isInteractive ? 'data-ace-interactive-code' : 'data-ace-highlight-code';\n\n    const preElements = root.getElementsByTagName('pre');\n    for (const pre of preElements) {\n        if (pre.style.display !== 'none') {\n            const uiParams = new UiParameters(pre);\n            uiParams.extractUiParameters(isInteractive, config);\n            if (pre.classList.contains(className) || pre.hasAttribute(alternativeName)) {\n                applyToPre(pre, isInteractive, uiParams);\n            }\n        }\n    }\n    // For Markdown compatibility.\n    const codeElements = root.getElementsByTagName('code');\n    for (const code of codeElements) {\n        if (code.parentNode !== null && code.parentNode.style.display !== 'none' &&\n                (code.hasAttribute(alternativeName) || code.classList.contains(className))) {\n            const uiParams = new UiParameters(code);\n            uiParams.extractUiParameters(isInteractive, config);\n            applyToPre(code.parentNode, isInteractive, uiParams);\n        }\n    }\n};\n\n/**\n * Replace the given PRE element with an element managed by the Ace editor,\n * unless 'hidden' is true, in which case we just hide the PRE.\n * @param {HTMLelement} pre The PRE element to be be replaced by an Ace editor.\n * @param {bool} isInteractive True for ace-interactive otherwise false.\n * @param {Object} uiParameters the User Interface parameters for the element.\n */\nconst applyToPre = async(pre, isInteractive, uiParameters) => {\n    const params = uiParameters.paramsMap;\n    if (params['file-upload-id']) {\n        setupFileHandler(params['file-upload-id']);\n    }\n\n    if (!params.hidden) {\n        setUpAce(pre, uiParameters, isInteractive);\n    } else if (isInteractive) { // Code is hidden but there's still a button to run it.\n        const getCode = () => pre.innerText;\n        addUi(pre, getCode, uiParameters);\n    }\n\n    pre.style.display = 'none'; // NB this sets display = 'none', checked above.\n};\n\n/**\n * Sets up Ace with all its parameters and adds a button if interactive.\n * @param {HTMLelement} pre The pre element that the Ace editor is replacing.\n * @param {Object} uiParameters The UI parameters from the Pre element + defaults.\n * @param {bool} isInteractive True if the code is interactive.\n */\nconst setUpAce = async(pre, uiParameters, isInteractive) => {\n    const params = uiParameters.paramsMap;\n    const darkMode = params['dark-theme-mode']; // 0, 1, 2 for never, sometimes, always\n    let theme = null;\n    // Use light or dark theme according to user's prefers-color-scheme.\n    // Default to light.\n    if (darkMode == 2 || (darkMode == 1 && globalThis.matchMedia &&\n            globalThis.matchMedia(\"(prefers-color-scheme: dark)\").matches)) {\n        theme = ACE_DARK_THEME;\n    } else {\n        theme = ACE_LIGHT_THEME;\n    }\n    const showLineNumbers = params['start-line-number'] ? true : false;\n    let aceLang = params['ace-lang'] ? params['ace-lang'] : params.lang;\n    aceLang = aceLang.toLowerCase();\n    if (aceLang in ACE_MODE_MAP) {\n        aceLang = ACE_MODE_MAP[aceLang];\n    }\n    const mode = 'ace/mode/' + aceLang;\n    const text = pre.textContent;\n    const lines = text.split(\"\\n\");\n    const numLines = lines.length;\n    const longestLine = longest(lines);\n\n    const editNode = document.createElement('div'); // Ace editor manages this\n    editNode.style.margin = \"6px 0px 6px 0px\";\n    editNode.style.lineHeight = \"1.3\";\n    editNode.style.width = pre.style.width ? pre.style.width : \"100%\";\n    editNode.style.resize = \"none\";\n    pre.after(editNode); // Insert the edit node\n\n    let aceConfig = {\n        newLineMode: \"unix\",\n        mode: mode,\n        minLines: Math.max(numLines, params['min-lines']),\n        maxLines: params['max-lines'],\n        fontSize: params['font-size'],\n        showLineNumbers: showLineNumbers,\n        firstLineNumber: params['start-line-number'],\n        showGutter: showLineNumbers,\n        showPrintMargin: false,\n        autoScrollEditorIntoView: true,\n        highlightActiveLine: showLineNumbers\n    };\n\n    const editor = globalThis.ace.edit(editNode, aceConfig);\n    const session = editor.getSession();\n    if (!pre.style.hasOwnProperty('width') || pre.style.width == 0) {\n        const aceWidestLine = Math.ceil(lineLength(editor.renderer, longestLine));\n        const minWidth = isInteractive ? aceWidestLine + LINE_NUMBER_COL_WIDTH : aceWidestLine;\n        editNode.style.minWidth = minWidth + \"px\";\n    }\n    session.setValue(text);\n    editor.setTheme(theme);\n    if (params.readonly !== null) {\n        editor.setReadOnly(true);\n        editNode.classList.add('readonly'); // For CSS use.\n    }\n\n    // Add a button and text area for output if ace-interactive-code.\n    if (isInteractive) {\n        const getCode = () => editor.getSession().getValue();\n        addUi(editNode, getCode, uiParameters);\n    } else {\n        editor.renderer.$cursorLayer.element.style.display = \"none\"; // Hide cursor.\n    }\n};\n\n/**\n * Return the length of the given line when rendered by the given Ace editor.\n * @param {Ace-renderer} renderer The Ace renderer.\n * @param {String} line The line whose length is being checked.\n * @return {int} The length of the rendered line in pixels.\n */\nconst lineLength = (renderer, line) => {\n  const chars = renderer.session.$getStringScreenWidth(line)[0];\n  const width = Math.max(chars, 2) * renderer.characterWidth + // Text size\n    2 * renderer.$padding + // Padding\n    2 + // Little extra for the cursor\n    0; // Add border width if needed\n\n  return width;\n};\n\n/**\n * Return the longest of an array of strings.\n * @param {array} lines An array of lines\n * @return {String} The longest of the lines\n */\nconst longest = (lines) => {\n    let longest = '';\n    for (const line of lines) {\n        if (line.length > longest.length) {\n            longest = line;\n        }\n    }\n    return longest;\n};\n"],"names":["ACE_MODE_MAP","async","root","isInteractive","config","className","alternativeName","preElements","getElementsByTagName","pre","style","display","uiParams","UiParameters","extractUiParameters","classList","contains","hasAttribute","applyToPre","codeElements","code","parentNode","uiParameters","params","paramsMap","hidden","getCode","innerText","setUpAce","darkMode","theme","globalThis","matchMedia","matches","showLineNumbers","aceLang","lang","toLowerCase","mode","text","textContent","lines","split","numLines","length","longestLine","longest","editNode","document","createElement","margin","lineHeight","width","resize","after","aceConfig","newLineMode","minLines","Math","max","maxLines","fontSize","firstLineNumber","showGutter","showPrintMargin","autoScrollEditorIntoView","highlightActiveLine","editor","ace","edit","session","getSession","hasOwnProperty","aceWidestLine","ceil","lineLength","renderer","minWidth","setValue","setTheme","readonly","setReadOnly","add","getValue","$cursorLayer","element","line","chars","$getStringScreenWidth","characterWidth","$padding"],"mappings":"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"}