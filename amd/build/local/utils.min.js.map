{"version":3,"file":"utils.min.js","sources":["../../src/local/utils.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for all the utility functions.\n *\n * @module     filter_ace_inline/local/utils\n * @copyright  Richard Lobb, Michelle Hsieh 2022\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\n\nconst RESULT_SUCCESS = 15; // Code for a correct Jobe run.\n\n/**\n * Get the specified language string and return a promise with the respective\n * language string output.\n * @param {string} langStringName The language string name.\n * should be plugged.\n * @returns {string} Promise with the language string output.\n */\nexport const getLangString = async(langStringName) =>\n    getString(langStringName, 'filter_ace_inline')\n    .catch(() => {\n        return undefined;\n    });\n\n/**\n * Analyse the response for errors. There are two sorts of error: sandbox failures,\n * for which the field response.error is non-zero meaning the run didn't take\n * place at all and failures in the run\n * itself, such as compile errors, timeouts, runtime errors etc. The\n * various codes are documented in the CodeRunner file sandbox.php.\n * Some error returns, notably compilation error and runtime error, are not\n * treated as errors here, since the stdout + stderr should reveal what\n * happened anyway. More obscure errors are lumped together as 'Unknown\n * runtime error'.\n * @param {object} response The response from the web-service sandbox request.\n * @returns {String} The language string to use for an error message or '' if\n * no error message.\n */\nexport const diagnose = (response) => {\n    // Table of error conditions.\n    // Each row is response.error, response.result, langstring\n    // response.result is ignored if response.error is non-zero.\n    // Any condition not in the table is deemed an \"Unknown runtime error\".\n    const ERROR_RESPONSES = [\n        [1, 0, 'error_access_denied'], // Sandbox AUTH_ERROR\n        [2, 0, 'error_unknown_language'], // Sandbox WRONG_LANG_ID\n        [3, 0, 'error_access_denied'], // Sandbox ACCESS_DENIED\n        [4, 0, 'error_submission_limit_reached'], // Sandbox SUBMISSION_LIMIT_EXCEEDED\n        [5, 0, 'error_sandbox_server_overload'], // Sandbox SERVER_OVERLOAD\n        [0, 11, ''], // RESULT_COMPILATION_ERROR\n        [0, 12, ''], // RESULT_RUNTIME_ERROR\n        [0, 13, 'error_timeout'], // RESULT TIME_LIMIT\n        [0, RESULT_SUCCESS, ''], // RESULT_SUCCESS\n        [0, 17, 'error_memory_limit'], // RESULT_MEMORY_LIMIT\n        [0, 21, 'error_sandbox_server_overload'], // RESULT_SERVER_OVERLOAD\n        [0, 30, 'error_excessive_output'] // RESULT OUTPUT_LIMIT\n    ];\n    for (const row of ERROR_RESPONSES) {\n        if (row[0] == response.error && (response.error != 0 || response.result == row[1])) {\n            return row[2];\n        }\n    }\n    return 'error_unknown_runtime';\n};\n\n/**\n * Escape text special HTML characters.\n * @param {string} text\n * @returns {string} text with various special chars replaced with equivalent\n * html entities. Newlines are replaced with <br>.\n */\nexport const escapeHtml = (text) => {\n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n\n  return text.replace(/[&<>\"']/g, function(m) {\n      return map[m];\n  });\n};\n\n/**\n * Concatenates the cmpinfo, stdout and stderr fields of the sandbox\n * response, truncating both stdout and stderr to a given maximum length\n * if necessary (in which case '... (truncated)' is appended.\n * @param {object} response Sandbox response object\n * @param {int} maxLen The maximum length of the trimmed stringlen.\n * @returns {String} The concatenated, truncated output.\n */\nexport const combinedOutput = (response, maxLen) => {\n    const limit = s => s.length <= maxLen ? s : s.substr(0, maxLen) + '... (truncated)';\n    return response.cmpinfo + limit(response.output) + limit(response.stderr);\n};\n\n\n/**\n * Creates elements en masse by taking an elementName and adding classes\n * and attributes to it.\n *\n * @param {string} elementName The name of the HTML element to be made.\n * @param {type} classList A list of all the classes to be added.\n * @param {type} attributeArray A map of attributes and values to be added.\n * @returns {Element}\n */\nexport const createComponent = (elementName, classList, attributeArray) => {\n    const element = document.createElement(elementName);\n    classList.forEach(htmlClass => element.classList.add(htmlClass));\n    for (const attribute in attributeArray) {\n        element.setAttribute(attribute, attributeArray[attribute]);\n    }\n    return element;\n};"],"names":["async","langStringName","catch","response","ERROR_RESPONSES","row","error","result","text","map","replace","m","maxLen","limit","s","length","substr","cmpinfo","output","stderr","elementName","classList","attributeArray","element","document","createElement","forEach","htmlClass","add","attribute","setAttribute"],"mappings":"2RAoC6BA,MAAAA,iBACzB,mBAAUC,eAAgB,qBACzBC,OAAM,2BAkBcC,iBAKfC,gBAAkB,CACpB,CAAC,EAAG,EAAG,uBACP,CAAC,EAAG,EAAG,0BACP,CAAC,EAAG,EAAG,uBACP,CAAC,EAAG,EAAG,kCACP,CAAC,EAAG,EAAG,iCACP,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,iBACR,CAAC,EA3Cc,GA2CK,IACpB,CAAC,EAAG,GAAI,sBACR,CAAC,EAAG,GAAI,iCACR,CAAC,EAAG,GAAI,+BAEP,MAAMC,OAAOD,mBACVC,IAAI,IAAMF,SAASG,QAA4B,GAAlBH,SAASG,OAAcH,SAASI,QAAUF,IAAI,WACpEA,IAAI,SAGZ,6CASgBG,aACnBC,IAAM,KACL,YACA,WACA,WACA,aACA,iBAGAD,KAAKE,QAAQ,YAAY,SAASC,UAC9BF,IAAIE,+BAYa,CAACR,SAAUS,gBAC/BC,MAAQC,GAAKA,EAAEC,QAAUH,OAASE,EAAIA,EAAEE,OAAO,EAAGJ,QAAU,yBAC3DT,SAASc,QAAUJ,MAAMV,SAASe,QAAUL,MAAMV,SAASgB,kCAavC,CAACC,YAAaC,UAAWC,wBAC9CC,QAAUC,SAASC,cAAcL,aACvCC,UAAUK,SAAQC,WAAaJ,QAAQF,UAAUO,IAAID,iBAChD,MAAME,aAAaP,eACpBC,QAAQO,aAAaD,UAAWP,eAAeO,mBAE5CN"}